//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Resources/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""KeyboardMaps"",
            ""id"": ""423f3211-a172-453a-9a29-8688ae63830a"",
            ""actions"": [
                {
                    ""name"": ""VerticalAxis"",
                    ""type"": ""Button"",
                    ""id"": ""d6268d73-e770-4d8c-b13b-478fb672651b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HorizontalAxis"",
                    ""type"": ""Button"",
                    ""id"": ""34a6b18d-b0f7-477b-a533-98fb66b9e23b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""898ca1e5-31fe-4316-b4c6-da9f170acea5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""a88cbfc9-d89f-405a-8391-5dbc0f88f9a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8f5b35d7-2e36-4342-a1f4-f9b53cb27102"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c29412c7-8e15-48a4-956a-c6a3d2e0c6a3"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2c7a9783-189c-45d6-87ed-f02b0a602b9b"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""HorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""20330460-4f91-4c4d-be22-4f6e6c5f4f82"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2a850d38-ce1b-4baa-bd13-91c1f5f9968b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""edd31b5d-a3ae-4ed1-9da2-16fe33fae7a2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7cef723e-888b-4093-8cb5-9d5a97269cee"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""VerticalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""be86fc76-0d2d-40a5-abff-4692d6904eb5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultScheme"",
            ""bindingGroup"": ""DefaultScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KeyboardMaps
        m_KeyboardMaps = asset.FindActionMap("KeyboardMaps", throwIfNotFound: true);
        m_KeyboardMaps_VerticalAxis = m_KeyboardMaps.FindAction("VerticalAxis", throwIfNotFound: true);
        m_KeyboardMaps_HorizontalAxis = m_KeyboardMaps.FindAction("HorizontalAxis", throwIfNotFound: true);
        m_KeyboardMaps_Escape = m_KeyboardMaps.FindAction("Escape", throwIfNotFound: true);
        m_KeyboardMaps_Space = m_KeyboardMaps.FindAction("Space", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardMaps
    private readonly InputActionMap m_KeyboardMaps;
    private List<IKeyboardMapsActions> m_KeyboardMapsActionsCallbackInterfaces = new List<IKeyboardMapsActions>();
    private readonly InputAction m_KeyboardMaps_VerticalAxis;
    private readonly InputAction m_KeyboardMaps_HorizontalAxis;
    private readonly InputAction m_KeyboardMaps_Escape;
    private readonly InputAction m_KeyboardMaps_Space;
    public struct KeyboardMapsActions
    {
        private @InputActions m_Wrapper;
        public KeyboardMapsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalAxis => m_Wrapper.m_KeyboardMaps_VerticalAxis;
        public InputAction @HorizontalAxis => m_Wrapper.m_KeyboardMaps_HorizontalAxis;
        public InputAction @Escape => m_Wrapper.m_KeyboardMaps_Escape;
        public InputAction @Space => m_Wrapper.m_KeyboardMaps_Space;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardMapsActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardMapsActionsCallbackInterfaces.Add(instance);
            @VerticalAxis.started += instance.OnVerticalAxis;
            @VerticalAxis.performed += instance.OnVerticalAxis;
            @VerticalAxis.canceled += instance.OnVerticalAxis;
            @HorizontalAxis.started += instance.OnHorizontalAxis;
            @HorizontalAxis.performed += instance.OnHorizontalAxis;
            @HorizontalAxis.canceled += instance.OnHorizontalAxis;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
        }

        private void UnregisterCallbacks(IKeyboardMapsActions instance)
        {
            @VerticalAxis.started -= instance.OnVerticalAxis;
            @VerticalAxis.performed -= instance.OnVerticalAxis;
            @VerticalAxis.canceled -= instance.OnVerticalAxis;
            @HorizontalAxis.started -= instance.OnHorizontalAxis;
            @HorizontalAxis.performed -= instance.OnHorizontalAxis;
            @HorizontalAxis.canceled -= instance.OnHorizontalAxis;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
        }

        public void RemoveCallbacks(IKeyboardMapsActions instance)
        {
            if (m_Wrapper.m_KeyboardMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardMapsActions @KeyboardMaps => new KeyboardMapsActions(this);
    private int m_DefaultSchemeSchemeIndex = -1;
    public InputControlScheme DefaultSchemeScheme
    {
        get
        {
            if (m_DefaultSchemeSchemeIndex == -1) m_DefaultSchemeSchemeIndex = asset.FindControlSchemeIndex("DefaultScheme");
            return asset.controlSchemes[m_DefaultSchemeSchemeIndex];
        }
    }
    public interface IKeyboardMapsActions
    {
        void OnVerticalAxis(InputAction.CallbackContext context);
        void OnHorizontalAxis(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
    }
}
